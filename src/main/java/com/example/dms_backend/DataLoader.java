package com.example.dms_backend;

import com.example.dms_backend.model.*;
import com.example.dms_backend.repository.*;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataLoader {

    private final InstitutionRepository institutionRepository;
    private final UserRepository userRepository;

    @PostConstruct
    public void loadData() {

        // ‚úÖ V√âRIFICATION D'EXISTENCE - √âvite les doublons !
        if (institutionRepository.count() > 0) {
            log.info("üîÑ Donn√©es institutions d√©j√† pr√©sentes, DataLoader ignor√©");
            return;
        }

        log.info("üöÄ Initialisation des donn√©es de base...");

        // ‚úÖ INSTITUTIONS CORRIG√âES - Types coh√©rents, plus de logique √©mettrice/acqu√©reuse fixe
        Institution cih = institutionRepository.save(
                Institution.builder()
                        .nom("CIH BANK")
                        .type(TypeInstitution.CENTRE)  // ‚úÖ NEUTRE - R√¥le d√©termin√© par CSV
                        .enabled(true)
                        .build());

        Institution attijari = institutionRepository.save(
                Institution.builder()
                        .nom("ATTIJARIWAFA")
                        .type(TypeInstitution.CENTRE)  // ‚úÖ NEUTRE - R√¥le d√©termin√© par CSV
                        .enabled(true)
                        .build());

        Institution bmce = institutionRepository.save(
                Institution.builder()
                        .nom("BMCE")
                        .type(TypeInstitution.CENTRE)  // ‚úÖ NEUTRE - R√¥le d√©termin√© par CSV
                        .enabled(true)
                        .build());

        Institution bam = institutionRepository.save(
                Institution.builder()
                        .nom("BANK AL-MAGHRIB")
                        .type(TypeInstitution.CENTRE)  // ‚úÖ Vraie banque centrale
                        .enabled(true)
                        .build());

        Institution apple = institutionRepository.save(
                Institution.builder()
                        .nom("Apple Pay")
                        .type(TypeInstitution.PORTEFEUILLE)  // ‚úÖ OK
                        .enabled(true)
                        .build());

        Institution paypal = institutionRepository.save(
                Institution.builder()
                        .nom("PayPal")
                        .type(TypeInstitution.PORTEFEUILLE)  // ‚úÖ OK
                        .enabled(true)
                        .build());

        log.info("‚úÖ {} institutions cr√©√©es", institutionRepository.count());

        // ‚úÖ UTILISATEURS - Avec v√©rification d'existence
        if (userRepository.count() == 0) {

            userRepository.save(Utilisateur.builder()
                    .nom("Admin Centre")
                    .email("centre@dms.com")
                    .password(new BCryptPasswordEncoder().encode("admin123"))
                    .role("ROLE_ADMIN")
                    .enabled(true)
                    .institution(bam)  // Rattach√© √† la banque centrale
                    .niveaux(NiveauAcces.ELEVE)
                    .build());

            userRepository.save(Utilisateur.builder()
                    .nom("Employ√© CIH")
                    .email("employe@cih.com")
                    .password(new BCryptPasswordEncoder().encode("employe123"))
                    .role("ROLE_USER")
                    .enabled(true)
                    .institution(cih)  // Rattach√© √† CIH
                    .niveaux(NiveauAcces.MOYEN)
                    .build());

            log.info("‚úÖ {} utilisateurs cr√©√©s", userRepository.count());
        } else {
            log.info("üîÑ Utilisateurs d√©j√† pr√©sents, cr√©ation ignor√©e");
        }

        log.info("üéØ DataLoader termin√© avec succ√®s !");
        log.info("üìä R√©sum√© : {} institutions, {} utilisateurs",
                institutionRepository.count(), userRepository.count());
    }
}