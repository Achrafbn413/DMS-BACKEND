package com.example.dms_backend.service;

import com.example.dms_backend.model.*;
import com.example.dms_backend.repository.NotificationRepository;
import com.example.dms_backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
@Slf4j
public class NotificationService {

    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;

    /**
     * ‚úÖ M√âTHODE PRINCIPALE : Notification intelligente
     * Notifie l'AUTRE banque dans la transaction
     */
    public Notification notifierAutreBanque(Transaction transaction, Utilisateur utilisateurSignaleur, String messagePersonnalise) {
        if (transaction == null || utilisateurSignaleur == null) {
            throw new IllegalArgumentException("Transaction et utilisateur sont requis");
        }

        Institution institutionSignaleuse = utilisateurSignaleur.getInstitution();
        if (institutionSignaleuse == null) {
            throw new IllegalArgumentException("L'utilisateur doit √™tre associ√© √† une institution");
        }

        // ‚úÖ LOGIQUE INTELLIGENTE : D√©terminer quelle banque notifier
        Institution banqueANotifier = determinerBanqueANotifier(transaction, institutionSignaleuse);

        if (banqueANotifier == null) {
            log.warn("‚ö†Ô∏è Aucune banque √† notifier pour la transaction {}", transaction.getReference());
            return null;
        }

        // ‚úÖ Cr√©er et sauvegarder la notification
        String message = messagePersonnalise != null ? messagePersonnalise :
                String.format("Une transaction a √©t√© signal√©e par %s (R√©f: %s)",
                        institutionSignaleuse.getNom(), transaction.getReference());

        Notification notification = Notification.builder()
                .destinataire(banqueANotifier)
                .transaction(transaction)
                .message(message)
                .lue(false)
                .dateCreation(LocalDateTime.now())
                .build();

        Notification saved = notificationRepository.save(notification);

        log.info("‚úÖ Notification cr√©√©e et envoy√©e √† {} pour transaction {}",
                banqueANotifier.getNom(), transaction.getReference());

        return saved;
    }

    /**
     * ‚úÖ LOGIQUE INTELLIGENTE : D√©termine quelle banque notifier
     */
    private Institution determinerBanqueANotifier(Transaction transaction, Institution institutionSignaleuse) {
        // Si l'institution signaleuse est l'√©mettrice ‚Üí notifier l'acqu√©reuse
        if (transaction.getBanqueEmettrice() != null &&
                Objects.equals(transaction.getBanqueEmettrice().getId(), institutionSignaleuse.getId())) {
            log.info("üè¶ Institution signaleuse = √âmettrice ‚Üí Notification vers Acqu√©reuse: {}",
                    transaction.getBanqueAcquereuse() != null ? transaction.getBanqueAcquereuse().getNom() : "null");
            return transaction.getBanqueAcquereuse();
        }

        // Si l'institution signaleuse est l'acqu√©reuse ‚Üí notifier l'√©mettrice
        if (transaction.getBanqueAcquereuse() != null &&
                Objects.equals(transaction.getBanqueAcquereuse().getId(), institutionSignaleuse.getId())) {
            log.info("üè¶ Institution signaleuse = Acqu√©reuse ‚Üí Notification vers √âmettrice: {}",
                    transaction.getBanqueEmettrice() != null ? transaction.getBanqueEmettrice().getNom() : "null");
            return transaction.getBanqueEmettrice();
        }

        log.warn("‚ö†Ô∏è Institution signaleuse {} ne correspond ni √† l'√©mettrice ni √† l'acqu√©reuse",
                institutionSignaleuse.getNom());
        return null;
    }

    /**
     * ‚úÖ R√©cup√©rer les notifications non lues pour une institution
     */
    public List<Notification> getNotificationsNonLues(Institution institution) {
        if (institution == null) {
            throw new IllegalArgumentException("Institution requise");
        }

        List<Notification> notifications = notificationRepository.findByDestinataireAndLueFalse(institution);
        log.info("üìã {} notifications non lues trouv√©es pour {}", notifications.size(), institution.getNom());

        return notifications;
    }

    /**
     * ‚úÖ Marquer une notification comme lue
     */
    public boolean marquerCommeLue(Long notificationId) {
        return notificationRepository.findById(notificationId)
                .map(notification -> {
                    notification.setLue(true);
                    notificationRepository.save(notification);
                    log.info("‚úÖ Notification {} marqu√©e comme lue", notificationId);
                    return true;
                })
                .orElse(false);
    }

    /**
     * ‚úÖ Compter les notifications non lues pour une institution
     */
    public long compterNotificationsNonLues(Institution institution) {
        if (institution == null) return 0;

        long count = notificationRepository.findByDestinataireAndLueFalse(institution).size();
        log.debug("üìä {} notifications non lues pour {}", count, institution.getNom());

        return count;
    }

    /**
     * ‚úÖ M√©thode de compatibilit√© (si encore utilis√©e ailleurs)
     * @deprecated Utiliser notifierAutreBanque() √† la place
     */
    @Deprecated
    public void notifierBanqueAcquereuse(Litige litige) {
        log.warn("‚ö†Ô∏è M√©thode deprecated notifierBanqueAcquereuse() appel√©e");
        if (litige != null && litige.getDeclarePar() != null) {
            notifierAutreBanque(litige.getTransaction(), litige.getDeclarePar(),
                    "Litige signal√© sur transaction " + litige.getTransaction().getReference());
        }
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE : Mise √† jour du compteur de notifications (pour Angular)
     */
    public void updateUnreadCount(long count) {
        // Cette m√©thode peut √™tre √©tendue pour WebSocket/SSE si n√©cessaire
        log.debug("üìä Compteur de notifications mis √† jour: {}", count);
    }
}